#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ 24/7
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import asyncio
import sys
import time
import traceback
from datetime import datetime
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import run_bot, load_config

def log_message(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}\n"
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(log_entry.strip())
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open("bot_24_7.log", "a", encoding="utf-8") as f:
        f.write(log_entry)

async def run_bot_with_restart():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    restart_count = 0
    max_restarts = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    
    while restart_count < max_restarts:
        try:
            log_message(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            room_id = os.environ.get('ROOM_ID')
            api_key = os.environ.get('API_TOKEN')
            
            if not room_id or not api_key:
                config = load_config()
                room_id = config.get("room_id", "668bc58d2aa6dd7d3bc16037")
                api_key = config.get("bot_token", "0288f3080eaaf24ce8748445f623737bebbbea63db35fbbd8ec0371ffc5840f6")
            
            log_message(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: {room_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await run_bot(room_id, api_key)
            
        except KeyboardInterrupt:
            log_message("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
            
        except Exception as e:
            restart_count += 1
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}): {str(e)}"
            log_message(error_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
            with open("bot_errors.log", "a", encoding="utf-8") as f:
                f.write(f"\n[{datetime.now()}] –û—à–∏–±–∫–∞ –±–æ—Ç–∞:\n")
                f.write(traceback.format_exc())
                f.write("\n" + "="*50 + "\n")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            wait_time = min(30, restart_count * 5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            log_message(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            time.sleep(wait_time)
            
        except asyncio.CancelledError:
            log_message("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            break
    
    if restart_count >= max_restarts:
        log_message("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    log_message("üéØ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã 24/7 –¥–ª—è Highrise –±–æ—Ç–∞")
    log_message("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        asyncio.run(run_bot_with_restart())
    except KeyboardInterrupt:
        log_message("üõë –°–∏—Å—Ç–µ–º–∞ 24/7 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        with open("bot_errors.log", "a", encoding="utf-8") as f:
            f.write(f"\n[{datetime.now()}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n")
            f.write(traceback.format_exc())
    
    log_message("üëã –°–∏—Å—Ç–µ–º–∞ 24/7 –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 